version: "2.2"

services:
  web:
    restart: always
    build: .
    volumes:
      - ./online_course/:/usr/src/app/
    ports:
      - "8000:8000"
    env_file: ./.env
    depends_on:
      - redis
      - db
    entrypoint: [ ]
    command: /bin/bash -c "
      ./wait_for.sh $${POSTGRES_HOST}:$${POSTGRES_PORT} &&
      python manage.py migrate &&
      python manage.py collectstatic --no-input &&
      python manage.py runserver 0.0.0.0:8000"
  db:
    restart: always
    image: postgres
    env_file: ./.env
    ports:
      - '5902:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
  redis:
    image: redis
    restart: always
#    env_file: ./.env
  worker:
    restart: always
    build: .
    volumes:
      - ./online_course/:/usr/src/app/
    entrypoint: ["celery"]
    command: ['-A', 'online_course.celery', 'worker', '-l', 'INFO']
    env_file: ./.env
    depends_on:
      - redis
      - db
  beat:
    entrypoint: ['celery']
    command: ['-A', 'online_course', 'beat','-l', 'INFO']
    env_file: ./.env
    build: .
    volumes:
      - ./online_course/:/usr/src/app/
    depends_on:
      - redis
      - db
  flower:
    restart: always
    build: .
    ports:
      - "5555:5555"
    entrypoint: ["celery"]
    command: ["-A", "online_course", "flower" ]
    volumes:
      - ./online_course/:/usr/src/app/
    env_file: ./.env
    depends_on:
      redis:
        condition: service_started
      worker:
        condition: service_started


volumes:
  postgres_data:
    driver: local